===== BEGIN infra/dev.parameters.json =====
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location":      { "value": "westus" },   
      "webAppName":    { "value": "knavillus10-portfolio-webapp" },
      "skuName":       { "value": "F1" }
    }
  }
  ===== END infra/dev.parameters.json =====

===== BEGIN infra/main.bicep =====
@description('Azure region for all resources')
param location string = 'westus'

@description('Globally-unique web-app name')
param webAppName string

@description('Plan SKU (F1 = Free, B1 = Basic, P1v3 = PremiumV3)')
@allowed([              // <— commas OR new lines
  'F1'
  'B1'
  'P1v3'
])
param skuName string = 'F1'

@description('Stack+version string understood by App Service on Linux')
param linuxFxVersion string = 'PYTHON|3.13'

var planName = '${webAppName}-plan'

// Map the SKU to the pricing tier expected by the ARM API
var skuToTier = {
  F1: 'Free'
  B1: 'Basic'
  P1v3: 'PremiumV3'
}
var tier = skuToTier[skuName]

resource plan 'Microsoft.Web/serverfarms@2023-01-01' = {
  name:     planName
  location: location
  kind:     'linux'
  sku: {
    name:     skuName
    tier:     tier
    capacity: 1
  }
  properties: {
    reserved: true        // marks this as a Linux plan
  }
}

resource site 'Microsoft.Web/sites@2023-01-01' = {
  name:     webAppName
  location: location
  kind:     'app,linux'
  properties: {
    serverFarmId: plan.id
    httpsOnly:    true
    siteConfig: {
      linuxFxVersion: linuxFxVersion
      alwaysOn:       false          // free plan can’t keep-alive
    }
  }
}

output defaultHost string = site.properties.defaultHostName
===== END infra/main.bicep =====

===== BEGIN infra/main.json =====
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "16480981856526273145"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "westus",
      "metadata": {
        "description": "Azure region for all resources"
      }
    },
    "webAppName": {
      "type": "string",
      "metadata": {
        "description": "Globally-unique web-app name"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "B1",
        "P1v3"
      ],
      "metadata": {
        "description": "Plan SKU (F1 = Free, B1 = Basic, P1v3 = PremiumV3)"
      }
    },
    "linuxFxVersion": {
      "type": "string",
      "defaultValue": "PYTHON|3.13",
      "metadata": {
        "description": "Stack+version string understood by App Service on Linux"
      }
    }
  },
  "variables": {
    "planName": "[format('{0}-plan', parameters('webAppName'))]",
    "skuToTier": {
      "F1": "Free",
      "B1": "Basic",
      "P1v3": "PremiumV3"
    },
    "tier": "[variables('skuToTier')[parameters('skuName')]]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[variables('planName')]",
      "location": "[parameters('location')]",
      "kind": "linux",
      "sku": {
        "name": "[parameters('skuName')]",
        "tier": "[variables('tier')]",
        "capacity": 1
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[parameters('webAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "alwaysOn": false
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]"
      ]
    }
  ],
  "outputs": {
    "defaultHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName]"
    }
  }
}===== END infra/main.json =====

===== BEGIN dev.sh =====
#!/usr/bin/env bash
set -euo pipefail

# Export optional debug environment variables if provided
: "${DEBUG:=}"
: "${VITE_ENABLE_DEBUG:=}"
export DEBUG VITE_ENABLE_DEBUG

# Function to kill existing processes
kill_existing_processes() {
  echo "Checking for existing backend and frontend processes..."
  BACKEND_PID=$(lsof -ti:8000 || true)
  FRONTEND_PID=$(lsof -ti:5173 || true)

  if [ -n "$BACKEND_PID" ]; then
    echo "Stopping existing backend process (PID: $BACKEND_PID)..."
    kill -9 $BACKEND_PID
  fi

  if [ -n "$FRONTEND_PID" ]; then
    echo "Stopping existing frontend process (PID: $FRONTEND_PID)..."
    kill -9 $FRONTEND_PID
  fi
}

# Step 0: Kill existing processes
kill_existing_processes

# Step 1: Create virtual environment if it doesn't exist
if [ ! -d "venv" ]; then
  echo "Creating Python virtual environment..."
  python3 -m venv venv
fi

# Step 2: Activate virtual environment
source venv/bin/activate
echo "Using virtual environment at ./venv"

# Step 3: Install Python dependencies
echo "Installing Python dependencies..."
pip install -r requirements.txt

# Step 4: Start backend in background
echo "Starting FastAPI backend..."
uvicorn backend.app.main:app --reload &
BACKEND_PID=$!

# Step 5: Start frontend in background
echo "Starting frontend dev server..."

# Ensure we are in the correct directory before running npm commands
cd frontend
if [ ! -f "package.json" ]; then
  echo "Error: package.json not found in the frontend directory. Please check your working directory."
  exit 1
fi

# Run npm commands in the frontend directory
npm install
npm run dev &
FRONTEND_PID=$!
cd ..

# Step 6: Wait briefly for servers to start
sleep 2

# Step 7: Open in default browser (macOS or Linux)
echo "Opening http://localhost:5173..."
if command -v xdg-open > /dev/null; then
  xdg-open http://localhost:5173
elif command -v open > /dev/null; then
  open http://localhost:5173
else
  echo "Please open http://localhost:5173 in your browser"
fi

# Step 8: Wait for servers to shut down manually
wait $BACKEND_PID $FRONTEND_PID
===== END dev.sh =====

